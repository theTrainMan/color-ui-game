{"version":3,"sources":["components/Cell/Cell.js","components/Grid/Grid.js","components/Picker/Picker.js","components/ColorPickers/ColorPickers.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["Cell","color","classString","size","className","Grid","grid","colors","rows","Object","keys","nodes","map","v","key","Picker","colorIndex","clickHandler","incrementCount","onClick","e","ColorPickers","pickers","index","COLORS","randomIndexFromCollection","collection","i","max","length","Math","random","Node","id","React","Component","Edge","sourceId","destId","weight","Graph","edgesByNode","setEdgeWeights","nodeId","this","edges","topIndex","rightIndex","bottomIndex","leftIndex","w","sameColor","push","forEach","setEdgeWeight","seenIds","processing","updateEdgeWeights","currentNodeId","pop","updateColor","edge","indexOf","nodeAId","nodeBId","App","props","bind","sliderInput","restart","colorFill","state","graph","count","setState","value","newGrid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac1af9e6.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nconst Cell = ({color, size}) => {\n  let classString = \"cell-\" + size + \" \" + color;\n  return (\n    <div className={classString}></div>\n  );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from '../Cell/Cell';\nimport './Grid.css';\n\nconst Grid = ({grid, colors}) => {\n  let rows = Object.keys(grid.nodes).map((v) => {\n    return <Cell key={v} color={colors[grid.nodes[v].color]} size={grid.size} />\n  });\n\n  return (\n    <div className=\"grid\">\n      {rows}\n    </div>\n  );\n}\n\nexport default Grid;","import React from 'react';\n\nimport './Picker.css';\n\nconst Picker = ({color, colorIndex, clickHandler, incrementCount}) => {\n  let className = color + ' picker';\n  return (\n    <div className={className}\n    onClick={(e) => {\n      incrementCount();\n      clickHandler(colorIndex);\n    }}\n    ></div>\n  );\n}\n\nexport default Picker;","import React from 'react';\nimport Picker from '../Picker/Picker';\nimport './ColorPickers.css';\n\nconst ColorPickers = ({colors, clickHandler, incrementCount}) => {\n  let pickers = colors.map(function (color, index) {\n    return <Picker color={color} key={\"picker_\" + color} colorIndex={index} clickHandler={clickHandler} incrementCount={incrementCount}/>\n  });\n  return (\n    <div className=\"pickers\">{pickers}</div>\n  );\n}\n\nexport default ColorPickers;","import React from 'react';\n\nconst COLORS = [0,1,2,3,4]; // TODO: tie this together with the COLORS from App.js\n\nconst randomIndexFromCollection = (collection) => {\n  var index = 0;\n  for (var i = 1, max = collection.length; i < max; i++) {\n    if (Math.random() < 1/(i+1)) {\n      index = i;\n    }\n  }\n  return index;\n}\n\nclass Node extends React.Component {\n  constructor(id, color) {\n    super();\n    this.id = id;\n    this.color = color;\n  }\n}\n\nclass Edge extends React.Component {\n  constructor(sourceId, destId, weight) {\n    super();\n    this.sourceId = sourceId;\n    this.destId = destId;\n    this.weight = weight;\n  }\n}\n\nclass Graph extends React.Component {\n  constructor(size=3) {\n    super();\n    this.size = size;\n    this.nodes = {};\n    this.edgesByNode = {};\n    for (let i=0; i<size*size; i++) {\n      this.nodes[i] = new Node(i, randomIndexFromCollection(COLORS));\n    }\n    this.setEdgeWeights();\n  }\n\n  setEdgeWeight(id) {\n      let node = this.nodes[id];\n      let nodeId = node.id;\n      // if i subtract the width of my box and i'm < 0 i don't have a top\n      // if i add one and mod myself with the width of my box and i am 0 i don't have a right\n      // if i add the width of my box and i am > width * width - 1 i don't have a bottom\n      // if i mod myself the width of my box and it is 0 i don't have a left\n      let edges = [];\n\n      let topIndex = nodeId - this.size;\n      let rightIndex = nodeId + 1;\n      let bottomIndex = nodeId + this.size;\n      let leftIndex = nodeId - 1;\n\n      if (topIndex >= 0) {\n        let w = this.sameColor(nodeId, topIndex) ? 0 : 1;\n        edges.push(new Edge(nodeId, topIndex, w));\n      }\n\n      if (rightIndex % this.size > 0) {\n        let w = this.sameColor(nodeId, rightIndex) ? 0 : 1;\n        edges.push(new Edge(nodeId, rightIndex, w));\n      }\n\n      if (bottomIndex < this.size * this.size) {\n        let w = this.sameColor(nodeId, bottomIndex) ? 0 : 1;\n        edges.push(new Edge(nodeId, bottomIndex, w));\n      }\n\n      if (nodeId % this.size !== 0) {\n        let w = this.sameColor(nodeId, leftIndex) ? 0 : 1;\n        edges.push(new Edge(nodeId, leftIndex, w));\n      }\n\n      this.edgesByNode[nodeId] = edges;\n  }\n\n  setEdgeWeights() {\n    Object.keys(this.nodes).forEach((id) => {\n      this.setEdgeWeight(id);\n    });\n  }\n\n  updateColor(id, color) {\n    this.nodes[id].color = color;\n  }\n\n  colorFill(color) {\n    let seenIds = [];\n    let processing = [0]; // starting at the top left corner (this is a stack)\n    let updateEdgeWeights = [];\n    while (processing.length > 0) {\n      let currentNodeId = processing.pop();\n      this.updateColor(currentNodeId, color);\n      seenIds.push(currentNodeId);\n      this.edgesByNode[currentNodeId].forEach((edge) => {\n        if (seenIds.indexOf(edge.destId) > -1) {\n          return; // bail if we've seen it\n        }\n        if (edge.weight === 0) {\n          processing.push(edge.destId); // process it there is no weight cost\n        }\n        if (edge.weight === 1 && this.nodes[currentNodeId].color === color) {\n          updateEdgeWeights.push(currentNodeId); // update the edge weghts after we finish color filling\n        }\n      });\n    }\n    updateEdgeWeights.forEach((nodeId) => this.setEdgeWeight(nodeId));\n    // BUG: The graph is now in a state that works but not all edges are accurate.\n  }\n\n  sameColor(nodeAId, nodeBId) {\n    return this.nodes[nodeAId].color === this.nodes[nodeBId].color;\n  }\n}\n\nexport default Graph;\n// update a node's color\n// which will update the weights of the nodes.\n// i can update colors and *then* update the weights\n","import React, { Component } from 'react';\nimport Grid from './components/Grid/Grid';\nimport ColorPickers from './components/ColorPickers/ColorPickers';\nimport Graph  from './Graph';\n\nimport './index.css';\n\nconst SIZE = 12;\nconst COLORS = ['blue','red','green','yellow','orange'];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementCount = this.incrementCount.bind(this);\n    this.sliderInput = this.sliderInput.bind(this);\n    this.restart = this.restart.bind(this);\n    this.colorFill = this.colorFill.bind(this);\n    this.state = {\n      size: SIZE,\n      graph: new Graph(SIZE),\n      colors: COLORS,\n      count: 0,\n    }\n  }\n\n  incrementCount() {\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  restart() {\n    this.setState({\n      graph: new Graph(this.state.size),\n      count: 0\n    });\n  }\n\n  sliderInput(value) {\n    this.setState({\n      size: value,\n      graph: this.newGrid(value, this.state.colors),\n      count: 0\n    });\n  }\n\n  colorFill(color) {\n    this.state.graph.colorFill(color);\n  }\n\n  render() {\n    return (\n      <div className=\"content\">\n        <div className=\"header\">\n          <h1>Color Balls</h1>\n          <div className=\"newgame\" onClick={(e) => this.restart()}>New Game</div>\n          <div className=\"count\">Changes <span>{this.state.count}</span></div>\n        </div>\n{/*        <div className=\"sizeChanger\">\n          <span className=\"size-value\">{this.state.size}</span>\n          <input\n            type=\"range\"\n            value={this.state.size}\n            min={MIN}\n            max={MAX}\n            step=\"1\"\n            onChange={(e) => this.sliderInput(e.target.value)} />\n        </div>*/}\n          <div><ColorPickers colors={this.state.colors} clickHandler={this.colorFill} incrementCount={this.incrementCount}/></div>\n        <Grid grid={this.state.graph} colors={this.state.colors} size={this.state.size}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}